import fetch from "node-fetch";
import { Blob } from "buffer"; // Importa o Blob do módulo 'buffer'
import FormData from "form-data";
import whisper from "../credentials/whisper.json";

export async function transcribeAudio(fileUrl: string): Promise<string> {
  // Baixa o áudio a partir do link fornecido
  const audioResponse = await fetch(fileUrl);
  if (!audioResponse.ok) {
    throw new Error(`Erro ao baixar áudio: ${audioResponse.statusText}`);
  }
  const audioBuffer = await audioResponse.buffer();

  // Converte o Buffer para um Blob
  const audioBlob = new Blob([audioBuffer], { type: "audio/ogg" });

  // Cria um FormData para enviar o arquivo para a API do Whisper
  const formData = new FormData();
  // O nome do campo e o nome do arquivo podem variar conforme sua API
  formData.append("file", audioBlob, "audio.ogg");

  // Faz a requisição para o endpoint de transcrição
  const response = await fetch(
    `${whisper.endpoint}${whisper.deployment}/audio/transcriptions?api-version=${whisper.apiVersion}`,
    {
      method: "POST",
      headers: {
        "api-key": whisper.apiKey,
        // O cabeçalho "Content-Type" será gerenciado automaticamente pelo FormData
      },
      body: formData as any, // Caso o TypeScript reclame, podemos usar um cast
    }
  );

  if (!response.ok) {
    throw new Error(`Erro na transcrição: ${response.statusText}`);
  }
  const data = await response.json();
  return data.transcription || "";
}
